// <auto-generated />
using System;
using System.Text.Json;
using Baston.Infra;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace Baston.Infra.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20250916031442_AddRolToUser")]
    partial class AddRolToUser
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.1")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.HasPostgresExtension(modelBuilder, "pgcrypto");
            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Baston.Domain.Entities.AlertEvent", b =>
                {
                    b.Property<long>("AlertId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("evento_id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("AlertId"));

                    b.Property<JsonDocument>("Detail")
                        .HasColumnType("jsonb")
                        .HasColumnName("detalle");

                    b.Property<Guid>("DeviceId")
                        .HasColumnType("uuid")
                        .HasColumnName("dispositivo_id");

                    b.Property<DateTime>("InsertedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("insertado_utc");

                    b.Property<DateTime>("T")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("ts_utc");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)")
                        .HasColumnName("tipo");

                    b.HasKey("AlertId");

                    b.HasIndex("T")
                        .HasDatabaseName("idx_evento_ts");

                    b.HasIndex("DeviceId", "T", "Type")
                        .IsUnique()
                        .HasDatabaseName("u_evento_dispositivo_ts_tipo");

                    b.ToTable("evento_alerta", (string)null);
                });

            modelBuilder.Entity("Baston.Domain.Entities.AppUser", b =>
                {
                    b.Property<Guid>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("usuario_id")
                        .HasDefaultValueSql("gen_random_uuid()");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("creado_utc");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("email");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("nombre_completo");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean")
                        .HasColumnName("activo");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("contrasena_hash");

                    b.Property<string>("Rol")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("rol");

                    b.HasKey("UserId");

                    b.HasIndex("Email")
                        .IsUnique();

                    b.ToTable("usuario", (string)null);
                });

            modelBuilder.Entity("Baston.Domain.Entities.Device", b =>
                {
                    b.Property<Guid>("DeviceId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("dispositivo_id")
                        .HasDefaultValueSql("gen_random_uuid()");

                    b.Property<string>("BtAddress")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("direccion_bt");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("creado_utc");

                    b.Property<string>("Firmware")
                        .HasColumnType("text")
                        .HasColumnName("firmware");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean")
                        .HasColumnName("activo");

                    b.Property<string>("Model")
                        .HasColumnType("text")
                        .HasColumnName("modelo");

                    b.Property<Guid>("OwnerUserId")
                        .HasColumnType("uuid")
                        .HasColumnName("usuario_id");

                    b.HasKey("DeviceId");

                    b.HasIndex("OwnerUserId", "BtAddress")
                        .IsUnique()
                        .HasDatabaseName("u_dispositivo_usuario_bt");

                    b.ToTable("dispositivo", (string)null);
                });

            modelBuilder.Entity("Baston.Domain.Entities.GpsFix", b =>
                {
                    b.Property<long>("FixId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("posicion_id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("FixId"));

                    b.Property<double?>("AltM")
                        .HasColumnType("double precision")
                        .HasColumnName("alt_m");

                    b.Property<Guid>("DeviceId")
                        .HasColumnType("uuid")
                        .HasColumnName("dispositivo_id");

                    b.Property<DateTime>("InsertedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("insertado_utc");

                    b.Property<double>("Lat")
                        .HasColumnType("double precision")
                        .HasColumnName("lat");

                    b.Property<double>("Lon")
                        .HasColumnType("double precision")
                        .HasColumnName("lon");

                    b.Property<DateTime>("T")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("ts_utc");

                    b.HasKey("FixId");

                    b.HasIndex("T")
                        .HasDatabaseName("idx_posicion_ts");

                    b.HasIndex("DeviceId", "T")
                        .IsUnique()
                        .HasDatabaseName("u_posicion_dispositivo_ts");

                    b.ToTable("posicion_gps", null, t =>
                        {
                            t.HasCheckConstraint("ck_pos_lat", "lat BETWEEN -90 AND 90");

                            t.HasCheckConstraint("ck_pos_lon", "lon BETWEEN -180 AND 180");
                        });
                });

            modelBuilder.Entity("Baston.Domain.Entities.KvMetaServer", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid")
                        .HasColumnName("usuario_id");

                    b.Property<string>("K")
                        .HasColumnType("text")
                        .HasColumnName("k");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("actualizado_utc");

                    b.Property<string>("V")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("v");

                    b.HasKey("UserId", "K");

                    b.ToTable("kv_meta_servidor", (string)null);
                });
#pragma warning restore 612, 618
        }
    }
}
